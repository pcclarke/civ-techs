{"ast":null,"code":"// Get a list of the required technology prerequisites for a given thing\nexport function getReqTechPreReqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if (Array.isArray(examine.requires) && examine.requires.indexOf(data.technologies[i].id) !== -1 || examine.requires === data.technologies[i].id) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  return preReqs;\n}\n; // Get a list of the displayed things this technology leads to that require it\n\nexport function getLeadsToReq(examine, compareData) {\n  let leads = [];\n\n  for (let i = 0; i < compareData.length; i++) {\n    if (compareData[i].requires && (Array.isArray(compareData[i].requires) && compareData[i].requires.indexOf(examine.id) !== -1 || compareData[i].requires === examine.id)) {\n      leads.push(compareData[i]);\n    }\n  }\n\n  return leads;\n}\n; // Get a list of the optional technology prerequisites for a given thing\n\nexport function getOptTechPreReqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.optional) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if (Array.isArray(examine.optional) && examine.optional.indexOf(data.technologies[i].id) !== -1 || examine.optional === data.technologies[i].id) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  return preReqs;\n}\n; // Get a list of the displayed things this technology leads to that optionally require it\n\nexport function getLeadsToOpt(examine, compareData) {\n  let leads = [];\n\n  for (let i = 0; i < compareData.length; i++) {\n    if (compareData[i].optional && (Array.isArray(compareData[i].optional) && compareData[i].optional.indexOf(examine.id) !== -1 || compareData[i].optional === examine.id)) {\n      leads.push(compareData[i]);\n    }\n  }\n\n  return leads;\n}\n; // Get a list of the technology prerequsites (required and optional) for a given thing (techs, units, whatever)\n\nexport function getTechPrereqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if (Array.isArray(examine.requires) && examine.requires.indexOf(data.technologies[i].id) !== -1 || examine.requires === data.technologies[i].id) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  if (examine.optional) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if (Array.isArray(examine.optional) && examine.optional.indexOf(data.technologies[i].id) !== -1 || examine.optional === data.technologies[i].id) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  return preReqs;\n}\n; // Get a list of the displayed things this technology leads to (required and optional)\n\nexport function getLeadsTo(examine, compareData) {\n  let leads = [];\n\n  for (let i = 0; i < compareData.length; i++) {\n    if (compareData[i].requires && (Array.isArray(compareData[i].requires) && compareData[i].requires.indexOf(examine.id) !== -1 || compareData[i].requires === examine.id)) {\n      leads.push(compareData[i]);\n    }\n\n    if (compareData[i].optional && (Array.isArray(compareData[i].optional) && compareData[i].optional.indexOf(examine.id) !== -1 || compareData[i].optional === examine.id)) {\n      leads.push(compareData[i]);\n    }\n  }\n\n  return leads;\n}\n; // Returns a technology item by its Id\n\nexport function getTechById(examineId, data) {\n  let tech = 'BAD_ID';\n\n  for (let i = 0; i < data.technologies.length; i++) {\n    if (data.technologies[i].id === examineId) {\n      tech = data.technologies[i];\n    }\n  }\n\n  return tech;\n}\n; // For a given technology, creates a list including:\n// technologies that it requires (optional & mandatory)\n// technologies it leads to\n// anything else it leads to and the other technologies they require\n\nexport function findNearby(origin, data) {\n  let nearbyList;\n  let fartherList = [];\n  let obsoleteTech;\n  let otherReqs;\n  nearbyList = getTechPrereqs(origin, data);\n  nearbyList = nearbyList.concat(convertSpecial(origin));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.technologies));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.promotions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.projects));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.build));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.buildings));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.civics));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.religions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.resources));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.units));\n\n  for (let i = 0; i < nearbyList.length; i++) {\n    otherReqs = getTechPrereqs(nearbyList[i], data);\n\n    for (let j = 0; j < otherReqs.length; j++) {\n      if (otherReqs[j].id !== origin.id) {\n        fartherList.push(otherReqs[j]);\n      }\n    }\n  }\n\n  nearbyList = nearbyList.concat(fartherList);\n  nearbyList.push(origin);\n\n  if (origin.obsolete) {\n    obsoleteTech = getTechById(origin.obsolete, data);\n    nearbyList.push(obsoleteTech);\n  }\n\n  return nearbyList;\n}\n; // Converts the specials in a technology into prereq objects\n\nexport function convertSpecial(examine) {\n  let specials = [];\n\n  if (examine.special) {\n    examine.special.forEach(s => {\n      s.requires = [];\n      s.requires.push(examine.id);\n      s.cat = 'specials';\n      specials.push(s);\n    });\n  }\n\n  return specials;\n}\n;","map":{"version":3,"sources":["/Users/pcclarke/Documents/GitHub/civ-techs/src/libs/dataTools.js"],"names":["getReqTechPreReqs","examine","data","preReqs","requires","i","technologies","length","Array","isArray","indexOf","id","push","getLeadsToReq","compareData","leads","getOptTechPreReqs","optional","getLeadsToOpt","getTechPrereqs","getLeadsTo","getTechById","examineId","tech","findNearby","origin","nearbyList","fartherList","obsoleteTech","otherReqs","concat","convertSpecial","promotions","projects","build","buildings","civics","religions","resources","units","j","obsolete","specials","special","forEach","s","cat"],"mappings":"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","sourcesContent":["// Get a list of the required technology prerequisites for a given thing\nexport function getReqTechPreReqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if ((Array.isArray(examine.requires) && examine.requires.indexOf(data.technologies[i].id) !== -1) ||\n        (examine.requires === data.technologies[i].id)) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  return preReqs;\n};\n\n// Get a list of the displayed things this technology leads to that require it\n export function getLeadsToReq(examine, compareData) {\n  let leads = [];\n\n  for (let i = 0; i < compareData.length; i++) {\n    if (compareData[i].requires &&\n      ((Array.isArray(compareData[i].requires) && compareData[i].requires.indexOf(examine.id) !== -1) ||\n      (compareData[i].requires === examine.id))) {\n      leads.push(compareData[i]);\n    }\n  }\n\n  return leads;\n};\n\n// Get a list of the optional technology prerequisites for a given thing\nexport function getOptTechPreReqs (examine, data) {\n  let preReqs = [];\n\n  if (examine.optional) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if ((Array.isArray(examine.optional) && examine.optional.indexOf(data.technologies[i].id) !== -1) ||\n        (examine.optional === data.technologies[i].id)) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  return preReqs;\n};\n\n// Get a list of the displayed things this technology leads to that optionally require it\nexport function getLeadsToOpt(examine, compareData) {\n  let leads = [];\n\n  for (let i = 0; i < compareData.length; i++) {\n    if (compareData[i].optional &&\n      ((Array.isArray(compareData[i].optional) && compareData[i].optional.indexOf(examine.id) !== -1) ||\n      (compareData[i].optional === examine.id))) {\n      leads.push(compareData[i]);\n    }\n  }\n\n  return leads;\n};\n\n// Get a list of the technology prerequsites (required and optional) for a given thing (techs, units, whatever)\nexport function getTechPrereqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if ((Array.isArray(examine.requires) && examine.requires.indexOf(data.technologies[i].id) !== -1) ||\n        (examine.requires === data.technologies[i].id)) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n  if (examine.optional) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if ((Array.isArray(examine.optional) && examine.optional.indexOf(data.technologies[i].id) !== -1) ||\n        (examine.optional === data.technologies[i].id)) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  return preReqs;\n};\n\n// Get a list of the displayed things this technology leads to (required and optional)\nexport function getLeadsTo(examine, compareData) {\n  let leads = [];\n\n  for (let i = 0; i < compareData.length; i++) {\n    if (compareData[i].requires &&\n      ((Array.isArray(compareData[i].requires) && compareData[i].requires.indexOf(examine.id) !== -1) ||\n      (compareData[i].requires === examine.id))) {\n      leads.push(compareData[i]);\n    }\n    if (compareData[i].optional &&\n      ((Array.isArray(compareData[i].optional) && compareData[i].optional.indexOf(examine.id) !== -1) ||\n      (compareData[i].optional === examine.id))) {\n      leads.push(compareData[i]);\n    }\n  }\n\n  return leads;\n};\n\n// Returns a technology item by its Id\nexport function getTechById(examineId, data) {\n  let tech = 'BAD_ID';\n\n  for (let i = 0; i < data.technologies.length; i++) {\n    if (data.technologies[i].id === examineId) {\n      tech = data.technologies[i];\n    }\n  }\n\n  return tech;\n};\n\n// For a given technology, creates a list including:\n// technologies that it requires (optional & mandatory)\n// technologies it leads to\n// anything else it leads to and the other technologies they require\nexport function findNearby(origin, data) {\n  let nearbyList;\n  let fartherList = [];\n  let obsoleteTech;\n  let otherReqs;\n\n  nearbyList = getTechPrereqs(origin, data);\n  nearbyList = nearbyList.concat(convertSpecial(origin));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.technologies));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.promotions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.projects));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.build));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.buildings));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.civics));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.religions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.resources));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.units));\n\n  for (let i = 0; i < nearbyList.length; i++) {\n    otherReqs = getTechPrereqs(nearbyList[i], data);\n\n    for (let j = 0; j < otherReqs.length; j++) {\n      if (otherReqs[j].id !== origin.id) {\n        fartherList.push(otherReqs[j]);\n      }\n    }\n  }\n\n  nearbyList = nearbyList.concat(fartherList);\n  nearbyList.push(origin);\n\n  if (origin.obsolete) {\n    obsoleteTech = getTechById(origin.obsolete, data);\n    nearbyList.push(obsoleteTech);\n  }\n\n  return nearbyList;\n};\n\n// Converts the specials in a technology into prereq objects\nexport function convertSpecial(examine) {\n  let specials = [];\n\n  if (examine.special) {\n    examine.special.forEach((s) => {\n      s.requires = [];\n      s.requires.push(examine.id);\n      s.cat = 'specials';\n      specials.push(s);\n    });\n  }\n\n  return specials;\n};"]},"metadata":{},"sourceType":"module"}