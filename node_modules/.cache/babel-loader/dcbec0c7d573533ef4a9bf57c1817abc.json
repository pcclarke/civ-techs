{"ast":null,"code":"// Get a list of the required technology prerequisites for a given thing\nexport function getReqTechPreReqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    data.technologies.forEach(t => {\n      if (Array.isArray(examine.requires)) {\n        if (examine.requires.indexOf(t.id)) {\n          preReqs.push(t);\n        }\n      } else {\n        if (examine.requires === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n\n  return preReqs;\n}\n; // Get a list of the displayed things this technology leads to that require it\n\nexport function getLeadsToReq(examine, compareData) {\n  let leads = [];\n  compareData.forEach(d => {\n    if (d.requires) {\n      if (Array.isArray(d.requires)) {\n        d.requires.forEach(r => {\n          if (r === examine.id) {\n            leads.push(d);\n          }\n        });\n      } else {\n        if (d.requires === examine.id) {\n          leads.push(d);\n        }\n      }\n    }\n  });\n  return leads;\n}\n; // Get a list of the optional technology prerequisites for a given thing\n\nexport function getOptTechPreReqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.optional) {\n    data.technologies.forEach(t => {\n      if (Array.isArray(examine.optional)) {\n        examine.optional.forEach(o => {\n          if (o === t.id) {\n            preReqs.push(t);\n          }\n        });\n      } else {\n        if (examine.optional === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n\n  return preReqs;\n}\n; // Get a list of the displayed things this technology leads to that optionally require it\n\nexport function getLeadsToOpt(examine, compareData) {\n  let leads = [];\n  compareData.forEach(c => {\n    if (c.optional) {\n      if (Array.isArray(c.optional)) {\n        c.optional.forEach(o => {\n          if (o === examine.id) {\n            leads.push(c);\n          }\n        });\n      } else {\n        if (c.optional === examine.id) {\n          leads.push(c);\n        }\n      }\n    }\n  });\n  return leads;\n}\n; // Get a list of the technology prerequsites (required and optional) for a given thing (techs, units, whatever)\n\nexport function getTechPrereqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    data.technologies.forEach(t => {\n      if (Array.isArray(examine.requires)) {\n        examine.requires.forEach(r => {\n          if (r === t.id) {\n            preReqs.push(t);\n          }\n        });\n      } else {\n        if (examine.requires === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n\n  if (examine.optional) {\n    data.technologies.forEach(t => {\n      if (Array.isArray(examine.optional)) {\n        examine.optional.forEach(o => {\n          if (o === t.id) {\n            preReqs.push(t);\n          }\n        });\n      } else {\n        if (examine.optional === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n\n  return preReqs;\n}\n; // Get a list of the displayed things this technology leads to (required and optional)\n\nexport function getLeadsTo(examine, compareData) {\n  let leads = [];\n  compareData.forEach(c => {\n    if (c.requires) {\n      if (Array.isArray(c.requires)) {\n        c.requires.forEach(r => {\n          if (r === examine.id) {\n            leads.push(c);\n          }\n        });\n      } else {\n        if (c.requires === examine.id) {\n          leads.push(c);\n        }\n      }\n    }\n\n    if (c.optional) {\n      if (Array.isArray(c.optional)) {\n        c.optional.forEach(o => {\n          if (o === examine.id) {\n            leads.push(c);\n          }\n        });\n      } else {\n        if (c.optional === examine.id) {\n          leads.push(c);\n        }\n      }\n    }\n  });\n  return leads;\n}\n; // Returns a technology item by its Id\n\nexport function getTechById(examineId, data) {\n  let tech = 'BAD_ID';\n  data.technologies.forEach(t => {\n    if (t.id === examineId) {\n      tech = t;\n    }\n  });\n  return tech;\n}\n; // For a given technology, creates a list including:\n// technologies that it requires (optional & mandatory)\n// technologies it leads to\n// anything else it leads to and the other technologies they require\n\nexport function findNearby(origin, data) {\n  let nearbyList;\n  let fartherList = [];\n  let obsoleteTech;\n  let otherReqs;\n  nearbyList = getTechPrereqs(origin, data);\n  nearbyList = nearbyList.concat(convertSpecial(origin));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.technologies));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.promotions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.projects));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.build));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.buildings));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.civics));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.religions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.resources));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.units));\n  nearbyList.forEach(n => {\n    otherReqs = getTechPrereqs(n, data);\n    otherReqs.forEach(o => {\n      if (o.id !== origin.id) {\n        fartherList.push(o);\n      }\n    });\n  });\n  nearbyList = nearbyList.concat(fartherList);\n  nearbyList.push(origin);\n\n  if (origin.obsolete) {\n    obsoleteTech = getTechById(origin.obsolete, data);\n    nearbyList.push(obsoleteTech);\n  }\n\n  return nearbyList;\n}\n; // Converts the specials in a technology into prereq objects\n\nexport function convertSpecial(examine) {\n  let specials = [];\n\n  if (examine.special) {\n    examine.special.forEach(s => {\n      s.requires = [];\n      s.requires.push(examine.id);\n      s.cat = 'specials';\n      specials.push(s);\n    });\n  }\n\n  return specials;\n}\n;","map":{"version":3,"sources":["/Users/pcclarke/Documents/GitHub/civ-techs/src/libs/dataTools.js"],"names":["getReqTechPreReqs","examine","data","preReqs","requires","technologies","forEach","t","Array","isArray","indexOf","id","push","getLeadsToReq","compareData","leads","d","r","getOptTechPreReqs","optional","o","getLeadsToOpt","c","getTechPrereqs","getLeadsTo","getTechById","examineId","tech","findNearby","origin","nearbyList","fartherList","obsoleteTech","otherReqs","concat","convertSpecial","promotions","projects","build","buildings","civics","religions","resources","units","n","obsolete","specials","special","s","cat"],"mappings":"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","sourcesContent":["// Get a list of the required technology prerequisites for a given thing\nexport function getReqTechPreReqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    data.technologies.forEach((t) => {\n      if (Array.isArray(examine.requires)) {\n        if (examine.requires.indexOf(t.id)) {\n          preReqs.push(t);\n        }\n      } else {\n        if (examine.requires === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n\n  return preReqs;\n};\n\n// Get a list of the displayed things this technology leads to that require it\n export function getLeadsToReq(examine, compareData) {\n  let leads = [];\n\n  compareData.forEach((d) => {\n    if (d.requires) {\n      if (Array.isArray(d.requires)) {\n        d.requires.forEach((r) => {\n            if(r === examine.id) {\n              leads.push(d);\n            }\n        });\n      } else {\n        if (d.requires === examine.id) {\n          leads.push(d);\n        }\n      }\n    }\n  });\n\n  return leads;\n};\n\n// Get a list of the optional technology prerequisites for a given thing\nexport function getOptTechPreReqs (examine, data) {\n  let preReqs = [];\n\n  if (examine.optional) {\n    data.technologies.forEach((t) => {\n      if (Array.isArray(examine.optional)) {\n        examine.optional.forEach((o) => {\n          if (o === t.id) {\n            preReqs.push(t);\n          }\n        });\n      } else {\n        if (examine.optional === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n\n  return preReqs;\n};\n\n// Get a list of the displayed things this technology leads to that optionally require it\nexport function getLeadsToOpt(examine, compareData) {\n  let leads = [];\n\n  compareData.forEach((c) => {\n    if (c.optional) {\n      if (Array.isArray(c.optional)) {\n        c.optional.forEach((o) => {\n          if (o === examine.id) {\n            leads.push(c);\n          }\n        });\n      } else {\n        if (c.optional === examine.id) {\n          leads.push(c);\n        }\n      }\n    }\n  });\n\n    return leads;\n};\n\n// Get a list of the technology prerequsites (required and optional) for a given thing (techs, units, whatever)\nexport function getTechPrereqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    data.technologies.forEach((t) => {\n      if (Array.isArray(examine.requires)) {\n        examine.requires.forEach((r) => {\n          if (r === t.id) {\n            preReqs.push(t);\n          }\n        });\n      } else {\n        if (examine.requires === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n  if (examine.optional) {\n    data.technologies.forEach((t) => {\n      if (Array.isArray(examine.optional)) {\n        examine.optional.forEach((o) => {\n          if (o === t.id) {\n            preReqs.push(t);\n          }\n        });\n      } else {\n        if (examine.optional === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n\n  return preReqs;\n};\n\n// Get a list of the displayed things this technology leads to (required and optional)\nexport function getLeadsTo(examine, compareData) {\n  let leads = [];\n\n  compareData.forEach((c) => {\n    if (c.requires) {\n      if (Array.isArray(c.requires)) {\n        c.requires.forEach((r) => {\n          if (r === examine.id) {\n            leads.push(c);\n          }\n        });\n      } else {\n        if (c.requires === examine.id) {\n          leads.push(c);\n        }\n      }\n    }\n    if (c.optional) {\n      if (Array.isArray(c.optional)) {\n        c.optional.forEach((o) => {\n          if (o === examine.id) {\n            leads.push(c);\n          }\n        });\n      } else {\n        if (c.optional === examine.id) {\n          leads.push(c);\n        }\n      }\n    }\n  });\n\n  return leads;\n};\n\n// Returns a technology item by its Id\nexport function getTechById(examineId, data) {\n  let tech = 'BAD_ID';\n\n  data.technologies.forEach((t) => {\n    if (t.id === examineId) {\n      tech = t;\n    }\n  });\n\n  return tech;\n};\n\n// For a given technology, creates a list including:\n// technologies that it requires (optional & mandatory)\n// technologies it leads to\n// anything else it leads to and the other technologies they require\nexport function findNearby(origin, data) {\n  let nearbyList;\n  let fartherList = [];\n  let obsoleteTech;\n  let otherReqs;\n\n  nearbyList = getTechPrereqs(origin, data);\n  nearbyList = nearbyList.concat(convertSpecial(origin));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.technologies));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.promotions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.projects));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.build));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.buildings));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.civics));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.religions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.resources));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.units));\n\n  nearbyList.forEach((n) => {\n    otherReqs = getTechPrereqs(n, data);\n\n    otherReqs.forEach((o) => {\n      if (o.id !== origin.id) {\n        fartherList.push(o);\n      }\n    });\n  });\n\n  nearbyList = nearbyList.concat(fartherList);\n  nearbyList.push(origin);\n\n  if (origin.obsolete) {\n    obsoleteTech = getTechById(origin.obsolete, data);\n    nearbyList.push(obsoleteTech);\n  }\n\n  return nearbyList;\n};\n\n// Converts the specials in a technology into prereq objects\nexport function convertSpecial(examine) {\n  let specials = [];\n\n  if (examine.special) {\n    examine.special.forEach((s) => {\n      s.requires = [];\n      s.requires.push(examine.id);\n      s.cat = 'specials';\n      specials.push(s);\n    });\n  }\n\n  return specials;\n};"]},"metadata":{},"sourceType":"module"}