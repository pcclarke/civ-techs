{"ast":null,"code":"// Get a list of the required technology prerequisites for a given thing\nexport function getReqTechPreReqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if (Array.isArray(examine.requires) && examine.requires.indexOf(data.technologies[i].id) !== -1 || examine.requires === data.technologies[i].id) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  return preReqs;\n}\n; // Get a list of the displayed things this technology leads to that require it\n\nexport function getLeadsToReq(examine, compareData) {\n  let leads = [];\n\n  for (let i = 0; i < compareData.length; i++) {\n    if (compareData[i].requires) {\n      if (Array.isArray(compareData[i].requires) && compareData[i].requires.indexOf(examine.id) !== -1 || compareData[i].requires === examine.id) {\n        leads.push(compareData[i]);\n      }\n    }\n  }\n\n  return leads;\n}\n; // Get a list of the optional technology prerequisites for a given thing\n\nexport function getOptTechPreReqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.optional) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if (Array.isArray(examine.optional) && examine.optional.indexOf(data.technologies[i].id) !== -1) {\n        preReqs.push(data.technologies[i]);\n      } else if (examine.optional === data.technologies[i].id) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  return preReqs;\n}\n; // Get a list of the displayed things this technology leads to that optionally require it\n\nexport function getLeadsToOpt(examine, compareData) {\n  let leads = [];\n  compareData.forEach(c => {\n    if (c.optional) {\n      if (Array.isArray(c.optional)) {\n        c.optional.forEach(o => {\n          if (o === examine.id) {\n            leads.push(c);\n          }\n        });\n      } else {\n        if (c.optional === examine.id) {\n          leads.push(c);\n        }\n      }\n    }\n  });\n  return leads;\n}\n; // Get a list of the technology prerequsites (required and optional) for a given thing (techs, units, whatever)\n\nexport function getTechPrereqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    data.technologies.forEach(t => {\n      if (Array.isArray(examine.requires)) {\n        examine.requires.forEach(r => {\n          if (r === t.id) {\n            preReqs.push(t);\n          }\n        });\n      } else {\n        if (examine.requires === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n\n  if (examine.optional) {\n    data.technologies.forEach(t => {\n      if (Array.isArray(examine.optional)) {\n        examine.optional.forEach(o => {\n          if (o === t.id) {\n            preReqs.push(t);\n          }\n        });\n      } else {\n        if (examine.optional === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n\n  return preReqs;\n}\n; // Get a list of the displayed things this technology leads to (required and optional)\n\nexport function getLeadsTo(examine, compareData) {\n  let leads = [];\n\n  for (let i = 0; i < compareData.length; i++) {\n    if (compareData[i].requires) {\n      if (Array.isArray(compareData[i].requires) && compareData[i].requires.indexOf(examine.id) !== -1) {\n        leads.push(compareData[i]);\n      } else {\n        if (compareData[i].requires === examine.id) {\n          leads.push(compareData[i]);\n        }\n      }\n    }\n\n    if (compareData[i].optional) {\n      if (Array.isArray(compareData[i].optional) && compareData[i].optional.indexOf(examine.id) !== -1) {\n        leads.push(compareData[i]);\n      } else {\n        if (compareData[i].optional === examine.id) {\n          leads.push(compareData[i]);\n        }\n      }\n    }\n  }\n\n  return leads;\n}\n; // Returns a technology item by its Id\n\nexport function getTechById(examineId, data) {\n  let tech = 'BAD_ID';\n  data.technologies.forEach(t => {\n    if (t.id === examineId) {\n      tech = t;\n    }\n  });\n  return tech;\n}\n; // For a given technology, creates a list including:\n// technologies that it requires (optional & mandatory)\n// technologies it leads to\n// anything else it leads to and the other technologies they require\n\nexport function findNearby(origin, data) {\n  let nearbyList;\n  let fartherList = [];\n  let obsoleteTech;\n  let otherReqs;\n  nearbyList = getTechPrereqs(origin, data);\n  nearbyList = nearbyList.concat(convertSpecial(origin));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.technologies));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.promotions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.projects));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.build));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.buildings));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.civics));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.religions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.resources));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.units));\n  nearbyList.forEach(n => {\n    otherReqs = getTechPrereqs(n, data);\n    otherReqs.forEach(o => {\n      if (o.id !== origin.id) {\n        fartherList.push(o);\n      }\n    });\n  });\n  nearbyList = nearbyList.concat(fartherList);\n  nearbyList.push(origin);\n\n  if (origin.obsolete) {\n    obsoleteTech = getTechById(origin.obsolete, data);\n    nearbyList.push(obsoleteTech);\n  }\n\n  return nearbyList;\n}\n; // Converts the specials in a technology into prereq objects\n\nexport function convertSpecial(examine) {\n  let specials = [];\n\n  if (examine.special) {\n    examine.special.forEach(s => {\n      s.requires = [];\n      s.requires.push(examine.id);\n      s.cat = 'specials';\n      specials.push(s);\n    });\n  }\n\n  return specials;\n}\n;","map":{"version":3,"sources":["/Users/pcclarke/Documents/GitHub/civ-techs/src/libs/dataTools.js"],"names":["getReqTechPreReqs","examine","data","preReqs","requires","i","technologies","length","Array","isArray","indexOf","id","push","getLeadsToReq","compareData","leads","getOptTechPreReqs","optional","getLeadsToOpt","forEach","c","o","getTechPrereqs","t","r","getLeadsTo","getTechById","examineId","tech","findNearby","origin","nearbyList","fartherList","obsoleteTech","otherReqs","concat","convertSpecial","promotions","projects","build","buildings","civics","religions","resources","units","n","obsolete","specials","special","s","cat"],"mappings":"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","sourcesContent":["// Get a list of the required technology prerequisites for a given thing\nexport function getReqTechPreReqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if ((Array.isArray(examine.requires) && examine.requires.indexOf(data.technologies[i].id) !== -1) ||\n        (examine.requires === data.technologies[i].id)) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  return preReqs;\n};\n\n// Get a list of the displayed things this technology leads to that require it\n export function getLeadsToReq(examine, compareData) {\n  let leads = [];\n\n  for (let i = 0; i < compareData.length; i++) {\n    if (compareData[i].requires) {\n      if ((Array.isArray(compareData[i].requires) && compareData[i].requires.indexOf(examine.id) !== -1) ||\n        (compareData[i].requires === examine.id)) {\n        leads.push(compareData[i]);\n      }\n    }\n  }\n\n  return leads;\n};\n\n// Get a list of the optional technology prerequisites for a given thing\nexport function getOptTechPreReqs (examine, data) {\n  let preReqs = [];\n\n  if (examine.optional) {\n    for (let i = 0; i < data.technologies.length; i++) {\n      if (Array.isArray(examine.optional) && examine.optional.indexOf(data.technologies[i].id) !== -1) {\n        preReqs.push(data.technologies[i]);\n      } else if (examine.optional === data.technologies[i].id) {\n        preReqs.push(data.technologies[i]);\n      }\n    }\n  }\n\n  return preReqs;\n};\n\n// Get a list of the displayed things this technology leads to that optionally require it\nexport function getLeadsToOpt(examine, compareData) {\n  let leads = [];\n\n  compareData.forEach((c) => {\n    if (c.optional) {\n      if (Array.isArray(c.optional)) {\n        c.optional.forEach((o) => {\n          if (o === examine.id) {\n            leads.push(c);\n          }\n        });\n      } else {\n        if (c.optional === examine.id) {\n          leads.push(c);\n        }\n      }\n    }\n  });\n\n    return leads;\n};\n\n// Get a list of the technology prerequsites (required and optional) for a given thing (techs, units, whatever)\nexport function getTechPrereqs(examine, data) {\n  let preReqs = [];\n\n  if (examine.requires) {\n    data.technologies.forEach((t) => {\n      if (Array.isArray(examine.requires)) {\n        examine.requires.forEach((r) => {\n          if (r === t.id) {\n            preReqs.push(t);\n          }\n        });\n      } else {\n        if (examine.requires === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n  if (examine.optional) {\n    data.technologies.forEach((t) => {\n      if (Array.isArray(examine.optional)) {\n        examine.optional.forEach((o) => {\n          if (o === t.id) {\n            preReqs.push(t);\n          }\n        });\n      } else {\n        if (examine.optional === t.id) {\n          preReqs.push(t);\n        }\n      }\n    });\n  }\n\n  return preReqs;\n};\n\n// Get a list of the displayed things this technology leads to (required and optional)\nexport function getLeadsTo(examine, compareData) {\n  let leads = [];\n\n  for (let i = 0; i < compareData.length; i++) {\n    if (compareData[i].requires) {\n      if (Array.isArray(compareData[i].requires) && compareData[i].requires.indexOf(examine.id) !== -1) {\n        leads.push(compareData[i]);\n      } else {\n        if (compareData[i].requires === examine.id) {\n          leads.push(compareData[i]);\n        }\n      }\n    }\n    if (compareData[i].optional) {\n      if (Array.isArray(compareData[i].optional) && compareData[i].optional.indexOf(examine.id) !== -1) {\n        leads.push(compareData[i]);\n      } else {\n        if (compareData[i].optional === examine.id) {\n          leads.push(compareData[i]);\n        }\n      }\n    }\n  }\n\n  return leads;\n};\n\n// Returns a technology item by its Id\nexport function getTechById(examineId, data) {\n  let tech = 'BAD_ID';\n\n  data.technologies.forEach((t) => {\n    if (t.id === examineId) {\n      tech = t;\n    }\n  });\n\n  return tech;\n};\n\n// For a given technology, creates a list including:\n// technologies that it requires (optional & mandatory)\n// technologies it leads to\n// anything else it leads to and the other technologies they require\nexport function findNearby(origin, data) {\n  let nearbyList;\n  let fartherList = [];\n  let obsoleteTech;\n  let otherReqs;\n\n  nearbyList = getTechPrereqs(origin, data);\n  nearbyList = nearbyList.concat(convertSpecial(origin));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.technologies));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.promotions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.projects));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.build));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.buildings));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.civics));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.religions));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.resources));\n  nearbyList = nearbyList.concat(getLeadsTo(origin, data.units));\n\n  nearbyList.forEach((n) => {\n    otherReqs = getTechPrereqs(n, data);\n\n    otherReqs.forEach((o) => {\n      if (o.id !== origin.id) {\n        fartherList.push(o);\n      }\n    });\n  });\n\n  nearbyList = nearbyList.concat(fartherList);\n  nearbyList.push(origin);\n\n  if (origin.obsolete) {\n    obsoleteTech = getTechById(origin.obsolete, data);\n    nearbyList.push(obsoleteTech);\n  }\n\n  return nearbyList;\n};\n\n// Converts the specials in a technology into prereq objects\nexport function convertSpecial(examine) {\n  let specials = [];\n\n  if (examine.special) {\n    examine.special.forEach((s) => {\n      s.requires = [];\n      s.requires.push(examine.id);\n      s.cat = 'specials';\n      specials.push(s);\n    });\n  }\n\n  return specials;\n};"]},"metadata":{},"sourceType":"module"}