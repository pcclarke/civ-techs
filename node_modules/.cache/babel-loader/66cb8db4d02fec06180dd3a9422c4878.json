{"ast":null,"code":"import { getLeadsToReq, getLeadsToOpt, getTechById, getTechPrereqs } from './dataTools.js';\nimport { cloneDeep } from 'lodash';\nexport function setupArcs(data) {\n  let arcData = cloneDeep(data);\n  let arcDists = []; // list of recent arcRanks\n\n  let leadsReq;\n  let leadsOpt;\n  let minArcDist;\n  let maxArcDist; // Add in the displayed into their prerequisites so that the arcs can be set up\n\n  arcData.displayed.forEach((d, i) => {\n    let rekked = []; // copy leads to required displayed\n\n    let opted = []; // copy leads to optional displayed\n    // let obsoleted = [];\n\n    minArcDist = 0;\n    maxArcDist = 0;\n    leadsReq = getLeadsToReq(d, arcData.displayed);\n    leadsOpt = getLeadsToOpt(d, arcData.displayed);\n    let minPos = d.pos;\n    let maxPos = d.pos; // Determine how many positions arc goes through and what it is mandatory for\n\n    leadsReq.forEach(lr => {\n      let arcDist = lr.pos - d.pos;\n\n      if (arcDist > maxArcDist) {\n        maxArcDist = arcDist;\n      }\n\n      if (lr.pos > maxPos) {\n        maxPos = lr.pos;\n      }\n\n      if (lr.pos < minPos) {\n        minPos = lr.pos;\n      }\n\n      let req = {\n        id: lr.id,\n        dist: arcDist,\n        pos: d.pos\n      };\n      rekked.push(req);\n    });\n    d.lreq = rekked; // Determine how many positions arc goes through and what it is optional for\n\n    leadsOpt.forEach(lo => {\n      let arcDist = lo.pos - d.pos;\n\n      if (arcDist > maxArcDist) {\n        maxArcDist = arcDist;\n      }\n\n      if (lo.pos > maxPos) {\n        maxPos = lo.pos;\n      }\n\n      if (lo.pos < minPos) {\n        minPos = lo.pos;\n      }\n\n      let opt = {\n        id: lo.id,\n        dist: arcDist,\n        pos: d.pos\n      };\n      opted.push(opt);\n    });\n    d.lopt = opted; // if (data.displayed[i].obsolete) {\n    //     var obsTech;\n    //     for (var j = 0; j < data.technologies.length; j++) { // Find the obsolete tech from id\n    //         if (data.displayed[i].obsolete === data.technologies[j].id) {\n    //             obsTech = data.technologies[j];\n    //         }\n    //     }\n    //     var arcDist = obsTech.pos - data.displayed[i].pos;\n    //     if (arcDist > maxArcDist) {\n    //         maxArcDist = arcDist;\n    //     }\n    //     if (obsTech.pos < minPos) {\n    //         minPos = obsTech.pos;\n    //     }\n    //     var obs = {\"id\": obsTech.id, \"dist\": arcDist, \"pos\": data.displayed[i].pos};\n    //     obsoleted.push(obs);\n    //     console.log(data.displayed[i]);\n    // }\n    // data.displayed[i].obs = obsoleted;\n    // Calculate angle of end of arc\n\n    d.arcDist = 2 * Math.PI / arcData.displayed.length * maxArcDist; // Calculate angle of start of arc\n\n    let baseDist = 0;\n\n    if (minPos < d.pos) {\n      baseDist = d.pos - minPos;\n    }\n\n    d.arcBack = 2 * Math.PI / arcData.displayed.length * baseDist; // Set arc rank - distance of arc from centre\n\n    if (d.lreq.length > 0 || d.lopt.length > 0) {\n      let ranked = 0;\n\n      for (let j = 0; j < arcDists.length; j++) {\n        if (arcDists[j] < minPos) {\n          arcDists[j] = i + maxArcDist;\n          d.arcRank = j;\n          ranked = 1;\n          break;\n        }\n      }\n\n      if (ranked === 0) {\n        arcDists.push(i + maxArcDist);\n        d.arcRank = arcDists.length - 1;\n      } // Add the arc rank to leads to\n\n\n      d.lreq.forEach(lr => {\n        lr.arcRank = d.arcRank;\n      });\n      d.lopt.forEach(lo => {\n        lo.arcRank = d.arcRank;\n      }); // d.lobs(function (ob) {\n      //    ob.arcRank = d.arcRank;\n      // });\n    } else if (d.requires || d.optional) {\n      d.arcRank = 499;\n    } else {\n      d.arcRank = 500;\n    }\n  }); // Set spoke rank - where to start drawing spoke\n\n  arcData.displayed.forEach(d => {\n    let spokeRank;\n    let preReqs;\n\n    if (d.arcRank > 0 && d.arcRank !== 500) {\n      spokeRank = d.arcRank;\n      preReqs = getTechPrereqs(d, arcData);\n      preReqs.forEach(p => {\n        if (p.arcRank < spokeRank) {\n          spokeRank = p.arcRank;\n        }\n      });\n      d.spokeRank = spokeRank;\n    } else {\n      d.spokeRank = 0;\n    }\n  }); // Set up arcs for each unlock, if necessary\n\n  arcData.displayed.forEach(d => {\n    d.unlocks.forEach(u => {\n      if (Array.isArray(u.ref.requires)) {\n        if (u.ref.requires.length > 1) {\n          let maxPos = 0;\n          let minPos = d.pos;\n          let endDist;\n          let baseDist;\n          u.lreq = [];\n          u.ref.requires.forEach(r => {\n            let unlockReq = getTechById(r, arcData);\n            let req;\n\n            if (unlockReq.pos > maxPos) {\n              maxPos = unlockReq.pos;\n            }\n\n            if (unlockReq.pos < minPos) {\n              minPos = unlockReq.pos;\n            }\n\n            if (unlockReq.pos !== d.pos) {\n              // unlock arc square positions\n              req = {\n                id: unlockReq.id,\n                dist: unlockReq.pos - d.pos,\n                pos: u.pos,\n                arcRank: u.rank\n              };\n              u.lreq.push(req);\n            }\n          });\n          endDist = 0;\n\n          if (maxPos > d.pos) {\n            endDist = maxPos - d.pos;\n          }\n\n          u.arcEnd = 2 * Math.PI / arcData.displayed.length * endDist;\n          baseDist = 0;\n\n          if (minPos < d.pos) {\n            baseDist = d.pos - minPos;\n          }\n\n          u.arcBack = 2 * Math.PI / arcData.displayed.length * baseDist;\n        }\n      }\n    });\n  });\n  return arcData;\n}","map":{"version":3,"sources":["/Users/pcclarke/Documents/GitHub/civ-techs/src/libs/setupArcs.js"],"names":["getLeadsToReq","getLeadsToOpt","getTechById","getTechPrereqs","cloneDeep","setupArcs","data","arcData","arcDists","leadsReq","leadsOpt","minArcDist","maxArcDist","displayed","forEach","d","i","rekked","opted","minPos","pos","maxPos","lr","arcDist","req","id","dist","push","lreq","lo","opt","lopt","Math","PI","length","baseDist","arcBack","ranked","j","arcRank","requires","optional","spokeRank","preReqs","p","unlocks","u","Array","isArray","ref","endDist","r","unlockReq","rank","arcEnd"],"mappings":"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","sourcesContent":["import {\n  getLeadsToReq,\n  getLeadsToOpt,\n  getTechById,\n  getTechPrereqs,\n} from './dataTools.js';\nimport {cloneDeep} from 'lodash';\n\nexport function setupArcs(data) {\n  let arcData = cloneDeep(data);\n\n  let arcDists = []; // list of recent arcRanks\n  let leadsReq;\n  let leadsOpt;\n  let minArcDist;\n  let maxArcDist;\n\n  // Add in the displayed into their prerequisites so that the arcs can be set up\n  arcData.displayed.forEach((d, i) => {\n    let rekked = []; // copy leads to required displayed\n    let opted = []; // copy leads to optional displayed\n    // let obsoleted = [];\n    minArcDist = 0;\n    maxArcDist = 0;\n    leadsReq = getLeadsToReq(d, arcData.displayed);\n    leadsOpt = getLeadsToOpt(d, arcData.displayed);\n    let minPos = d.pos;\n    let maxPos = d.pos;\n\n    // Determine how many positions arc goes through and what it is mandatory for\n    leadsReq.forEach((lr) => {\n      let arcDist = lr.pos - d.pos;\n      if (arcDist > maxArcDist) {\n        maxArcDist = arcDist;\n      }\n      if (lr.pos > maxPos) {\n        maxPos = lr.pos;\n      }\n      if (lr.pos < minPos) {\n        minPos = lr.pos;\n      }\n      let req = {id: lr.id, dist: arcDist, pos: d.pos};\n      rekked.push(req);\n    });\n    d.lreq = rekked;\n\n    // Determine how many positions arc goes through and what it is optional for\n    leadsOpt.forEach((lo) => {\n      let arcDist = lo.pos - d.pos;\n      if (arcDist > maxArcDist) {\n        maxArcDist = arcDist;\n      }\n      if (lo.pos > maxPos) {\n        maxPos = lo.pos;\n      }\n      if (lo.pos < minPos) {\n        minPos = lo.pos;\n      }\n      let opt = {id: lo.id, dist: arcDist, pos: d.pos};\n      opted.push(opt);\n    });\n    d.lopt = opted;\n\n    // if (data.displayed[i].obsolete) {\n    //     var obsTech;\n    //     for (var j = 0; j < data.technologies.length; j++) { // Find the obsolete tech from id\n    //         if (data.displayed[i].obsolete === data.technologies[j].id) {\n    //             obsTech = data.technologies[j];\n    //         }\n    //     }\n    //     var arcDist = obsTech.pos - data.displayed[i].pos;\n    //     if (arcDist > maxArcDist) {\n    //         maxArcDist = arcDist;\n    //     }\n    //     if (obsTech.pos < minPos) {\n    //         minPos = obsTech.pos;\n    //     }\n    //     var obs = {\"id\": obsTech.id, \"dist\": arcDist, \"pos\": data.displayed[i].pos};\n    //     obsoleted.push(obs);\n    //     console.log(data.displayed[i]);\n    // }\n    // data.displayed[i].obs = obsoleted;\n\n    // Calculate angle of end of arc\n    d.arcDist = ((2 * Math.PI) / arcData.displayed.length) * maxArcDist;\n\n    // Calculate angle of start of arc\n    let baseDist = 0;\n    if (minPos < d.pos) {\n        baseDist = d.pos - minPos;\n    }\n    d.arcBack = ((2 * Math.PI) / arcData.displayed.length) * baseDist;\n\n    // Set arc rank - distance of arc from centre\n    if (d.lreq.length > 0 || d.lopt.length > 0) {\n        let ranked = 0;\n        for (let j = 0; j < arcDists.length; j++) {\n            if (arcDists[j] < minPos) {\n                arcDists[j] = i + maxArcDist;\n                d.arcRank = j;\n                ranked = 1;\n                break;\n            }\n        }\n        if (ranked === 0) {\n            arcDists.push(i + maxArcDist);\n            d.arcRank = (arcDists.length - 1);\n        }\n\n        // Add the arc rank to leads to\n        d.lreq.forEach((lr) => {\n          lr.arcRank = d.arcRank;\n        });\n        d.lopt.forEach((lo) => {\n          lo.arcRank = d.arcRank;\n        });\n        // d.lobs(function (ob) {\n        //    ob.arcRank = d.arcRank;\n        // });\n    } else if (d.requires || d.optional) {\n        d.arcRank = 499;\n    } else {\n        d.arcRank = 500;\n    }\n  });\n\n\n  // Set spoke rank - where to start drawing spoke\n  arcData.displayed.forEach((d) => {\n    let spokeRank;\n    let preReqs;\n\n    if (d.arcRank > 0 && d.arcRank !== 500) {\n      spokeRank = d.arcRank;\n      preReqs = getTechPrereqs(d, arcData);\n      preReqs.forEach((p) => {\n          if (p.arcRank < spokeRank) {\n            spokeRank = p.arcRank;\n          }\n      });\n      d.spokeRank = spokeRank;\n    } else {\n      d.spokeRank = 0;\n    }\n  });\n\n\n  // Set up arcs for each unlock, if necessary\n  arcData.displayed.forEach((d) => {\n    d.unlocks.forEach((u) => {\n      if (Array.isArray(u.ref.requires)) {\n        if (u.ref.requires.length > 1) {\n          let maxPos = 0;\n          let minPos = d.pos;\n          let endDist;\n          let baseDist;\n\n          u.lreq = [];\n\n          u.ref.requires.forEach((r) => {\n            let unlockReq = getTechById(r, arcData);\n            let req;\n\n            if (unlockReq.pos > maxPos) {\n                maxPos = unlockReq.pos;\n            }\n            if (unlockReq.pos < minPos) {\n                minPos = unlockReq.pos;\n            }\n            if (unlockReq.pos !== d.pos) { // unlock arc square positions\n                req = {\n                  id: unlockReq.id,\n                  dist: (unlockReq.pos - d.pos),\n                  pos: u.pos,\n                  arcRank: u.rank\n                };\n                u.lreq.push(req);\n            }\n          });\n\n          endDist = 0;\n          if (maxPos > d.pos) {\n              endDist = maxPos - d.pos;\n          }\n          u.arcEnd = ((2 * Math.PI) / arcData.displayed.length) * endDist;\n          baseDist = 0;\n          if (minPos < d.pos) {\n            baseDist = d.pos - minPos;\n          }\n          u.arcBack = ((2 * Math.PI) / arcData.displayed.length) * baseDist;\n        }\n      }\n    });\n  });\n\n  return arcData;\n}"]},"metadata":{},"sourceType":"module"}